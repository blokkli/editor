fragment paragraphsBlokkliEditState on ParagraphsBlokkliEditState {
  mutations {
    ...paragraphsBlokkliMutationItem
  }

  currentIndex
  currentUserIsOwner
  ownerName
  mutatedState {
    fields(langcode: $langcode) {
      ...paragraphsBlokkliMutatedField
    }
    mutatedOptions: behaviorSettings
    violations {
      ...paragraphsBlokkliViolation
    }
  }

  entity {
    status
    label
    bundleLabel
  }

  mutatedEntity {
    ...pbMutatedEntity
  }

  translationState {
    isTranslatable
    sourceLanguage
    availableLanguages {
      id
      name
    }
    translations {
      id
      url
      editUrl
      exists
      status
    }
  }
}

fragment paragraphsBlokkliMutationItem on FieldItemTypeParagraphsBlokkliMutation {
  timestamp
  pluginId
  enabled
  plugin {
    label
    affectedItemUuid: affectedParagraphUuid
  }
}

fragment paragraphsBlokkliViolation on ParagraphsEditViolation {
  message
  code
  propertyPath
  entityUuid
  entityType
}

fragment paragraphsBlokkliMutatedField on ParagraphsBlokkliMutatedField {
  name
  entityType
  entityUuid
  list {
    ...paragraphsFieldItem
    props {
      ...paragraph
    }
  }
}

fragment paragraphsBlokkliMutationResult on ParagraphsBlokkliMutationResult {
  success
  errors
  state {
    ...paragraphsBlokkliEditState
  }
}

query pbEditState(
  $entityType: EntityType!
  $entityUuid: String!
  $langcode: String
) {
  state: getParagraphsEditState(
    entityType: $entityType
    entityUuid: $entityUuid
  ) {
    ...paragraphsBlokkliEditState
  }
}

fragment paragraphsBlokkliAvailableFeatures on ParagraphsBlokkliAvailableFeatures {
  conversion
  comment
  library
  mutations
}

mutation pbPublish(
  $entityType: EntityType!
  $entityUuid: String!
  $langcode: String
  $createNewState: Boolean
) {
  state: paragraphsEditMutationState(
    entityType: $entityType
    entityUuid: $entityUuid
  ) {
    action: publish(createNewState: $createNewState) {
      ...paragraphsBlokkliMutationResult
    }
  }
}

mutation pbAddParagraph(
  $entityType: EntityType!
  $entityUuid: String!
  $langcode: String
  $type: String!
  $hostType: String!
  $hostUuid: String!
  $hostFieldName: String!
  $afterUuid: String
) {
  state: paragraphsEditMutationState(
    entityType: $entityType
    entityUuid: $entityUuid
  ) {
    action: add(
      type: $type
      afterUuid: $afterUuid
      hostType: $hostType
      hostUuid: $hostUuid
      hostFieldName: $hostFieldName
    ) {
      ...paragraphsBlokkliMutationResult
    }
  }
}

mutation pbDeleteParagraph(
  $entityType: EntityType!
  $entityUuid: String!
  $langcode: String
  $uuid: String!
) {
  state: paragraphsEditMutationState(
    entityType: $entityType
    entityUuid: $entityUuid
  ) {
    action: remove(uuid: $uuid) {
      ...paragraphsBlokkliMutationResult
    }
  }
}

mutation pbDeleteMultipleParagraphs(
  $entityType: EntityType!
  $entityUuid: String!
  $langcode: String
  $uuids: [String]!
) {
  state: paragraphsEditMutationState(
    entityType: $entityType
    entityUuid: $entityUuid
  ) {
    action: remove_multiple(uuids: $uuids) {
      ...paragraphsBlokkliMutationResult
    }
  }
}

mutation pbDuplicateParagraph(
  $entityType: EntityType!
  $entityUuid: String!
  $langcode: String
  $uuid: String!
  $afterUuid: String
) {
  state: paragraphsEditMutationState(
    entityType: $entityType
    entityUuid: $entityUuid
  ) {
    action: duplicate(uuid: $uuid, afterUuid: $afterUuid) {
      ...paragraphsBlokkliMutationResult
    }
  }
}

mutation pbDuplicateMultipleParagraphs(
  $entityType: EntityType!
  $entityUuid: String!
  $langcode: String
  $uuids: [String]!
  $afterUuid: String
) {
  state: paragraphsEditMutationState(
    entityType: $entityType
    entityUuid: $entityUuid
  ) {
    action: duplicate_multiple(uuids: $uuids, afterUuid: $afterUuid) {
      ...paragraphsBlokkliMutationResult
    }
  }
}

mutation pbMakeParagraphReusable(
  $entityType: EntityType!
  $entityUuid: String!
  $langcode: String
  $uuid: String!
  $label: String!
) {
  state: paragraphsEditMutationState(
    entityType: $entityType
    entityUuid: $entityUuid
  ) {
    action: make_reusable(uuid: $uuid, label: $label) {
      ...paragraphsBlokkliMutationResult
    }
  }
}

mutation pbUpdateParagraphOption(
  $entityType: EntityType!
  $entityUuid: String!
  $langcode: String
  $uuid: String!
  $key: String!
  $value: String!
  $pluginId: String!
) {
  state: paragraphsEditMutationState(
    entityType: $entityType
    entityUuid: $entityUuid
  ) {
    action: update_behavior_setting(
      pluginId: $pluginId
      uuid: $uuid
      key: $key
      value: $value
    ) {
      ...paragraphsBlokkliMutationResult
    }
  }
}

mutation pbBulkUpdateParagraphBehaviorSettings(
  $entityType: EntityType!
  $entityUuid: String!
  $langcode: String
  $items: [ParagraphsBlokkliBulkUpdateBehaviorSettingsInput]!
) {
  state: paragraphsEditMutationState(
    entityType: $entityType
    entityUuid: $entityUuid
  ) {
    action: bulk_update_behavior_settings(items: $items) {
      ...paragraphsBlokkliMutationResult
    }
  }
}

mutation pbUpdateFieldValue(
  $entityType: EntityType!
  $entityUuid: String!
  $langcode: String!
  $uuid: String!
  $fieldName: String!
  $value: String!
) {
  state: paragraphsEditMutationState(
    entityType: $entityType
    entityUuid: $entityUuid
  ) {
    action: update_field_value(
      uuid: $uuid
      langcode: $langcode
      fieldName: $fieldName
      value: $value
    ) {
      ...paragraphsBlokkliMutationResult
    }
  }
}

mutation pbMoveParagraph(
  $entityType: EntityType!
  $entityUuid: String!
  $langcode: String
  $uuid: String!
  $hostType: String!
  $hostUuid: String!
  $hostFieldName: String!
  $afterUuid: String
) {
  state: paragraphsEditMutationState(
    entityType: $entityType
    entityUuid: $entityUuid
  ) {
    action: move(
      uuid: $uuid
      hostType: $hostType
      hostUuid: $hostUuid
      hostFieldName: $hostFieldName
      afterUuid: $afterUuid
    ) {
      ...paragraphsBlokkliMutationResult
    }
  }
}

mutation pbMoveMultipleItems(
  $entityType: EntityType!
  $entityUuid: String!
  $langcode: String
  $uuids: [String]!
  $hostType: String!
  $hostUuid: String!
  $hostFieldName: String!
  $afterUuid: String
) {
  state: paragraphsEditMutationState(
    entityType: $entityType
    entityUuid: $entityUuid
  ) {
    action: move_multiple(
      uuids: $uuids
      hostType: $hostType
      hostUuid: $hostUuid
      hostFieldName: $hostFieldName
      afterUuid: $afterUuid
    ) {
      ...paragraphsBlokkliMutationResult
    }
  }
}

mutation pbConvertParagraph(
  $entityType: EntityType!
  $entityUuid: String!
  $langcode: String
  $uuid: String!
  $targetBundle: String!
) {
  state: paragraphsEditMutationState(
    entityType: $entityType
    entityUuid: $entityUuid
  ) {
    action: convert(uuid: $uuid, targetBundle: $targetBundle) {
      ...paragraphsBlokkliMutationResult
    }
  }
}

mutation pbConvertMultiple(
  $entityType: EntityType!
  $entityUuid: String!
  $langcode: String
  $uuids: [String]!
  $targetBundle: String!
) {
  state: paragraphsEditMutationState(
    entityType: $entityType
    entityUuid: $entityUuid
  ) {
    action: convert_multiple(uuids: $uuids, targetBundle: $targetBundle) {
      ...paragraphsBlokkliMutationResult
    }
  }
}

mutation pbRedo(
  $entityType: EntityType!
  $entityUuid: String!
  $langcode: String
) {
  state: paragraphsEditMutationState(
    entityType: $entityType
    entityUuid: $entityUuid
  ) {
    action: redo {
      ...paragraphsBlokkliMutationResult
    }
  }
}

mutation pbSetHistoryIndex(
  $entityType: EntityType!
  $entityUuid: String!
  $langcode: String
  $index: Int!
) {
  state: paragraphsEditMutationState(
    entityType: $entityType
    entityUuid: $entityUuid
  ) {
    action: setHistoryIndex(index: $index) {
      ...paragraphsBlokkliMutationResult
    }
  }
}

mutation pbRevertAllChanges(
  $entityType: EntityType!
  $entityUuid: String!
  $langcode: String
) {
  state: paragraphsEditMutationState(
    entityType: $entityType
    entityUuid: $entityUuid
  ) {
    action: revertAllChanges {
      ...paragraphsBlokkliMutationResult
    }
  }
}

mutation pbUndo(
  $entityType: EntityType!
  $entityUuid: String!
  $langcode: String
) {
  state: paragraphsEditMutationState(
    entityType: $entityType
    entityUuid: $entityUuid
  ) {
    action: undo {
      ...paragraphsBlokkliMutationResult
    }
  }
}

query pbGetPreviewGrantUrl($entityType: EntityType!, $entityUuid: String!) {
  getParagraphsEditState(entityType: $entityType, entityUuid: $entityUuid) {
    previewUrl
  }
}

query pbGetImportSourceEntities(
  $entityType: String!
  $entityUuid: String!
  $searchText: String
) {
  pbGetImportSourceEntities(
    entityType: $entityType
    entityUuid: $entityUuid
    searchText: $searchText
  ) {
    total
    items {
      uuid
      label
    }
  }
}

mutation pbCopyFromExisting(
  $entityType: EntityType!
  $entityUuid: String!
  $fields: [String]!
  $sourceUuid: String!
  $langcode: String
) {
  state: paragraphsEditMutationState(
    entityType: $entityType
    entityUuid: $entityUuid
  ) {
    action: copy_from_existing(fields: $fields, sourceUuid: $sourceUuid) {
      ...paragraphsBlokkliMutationResult
    }
  }
}

mutation pbTakeOwnership(
  $entityType: EntityType!
  $entityUuid: String!
  $langcode: String
) {
  state: paragraphsEditMutationState(
    entityType: $entityType
    entityUuid: $entityUuid
  ) {
    action: takeOwnership {
      ...paragraphsBlokkliMutationResult
    }
  }
}

mutation pbReplaceMedia(
  $langcode: String!
  $entityType: EntityType!
  $entityUuid: String!
  $uuid: String!
  $fieldName: String!
  $mediaId: String!
) {
  state: paragraphsEditMutationState(
    entityType: $entityType
    entityUuid: $entityUuid
  ) {
    action: replace_media(
      uuid: $uuid
      langcode: $langcode
      fieldName: $fieldName
      mediaId: $mediaId
    ) {
      ...paragraphsBlokkliMutationResult
    }
  }
}

mutation pbReplaceHostEntityMedia(
  $langcode: String!
  $entityType: EntityType!
  $entityUuid: String!
  $fieldName: String!
  $mediaId: String!
) {
  state: paragraphsEditMutationState(
    entityType: $entityType
    entityUuid: $entityUuid
  ) {
    action: replace_host_entity_media(
      langcode: $langcode
      fieldName: $fieldName
      mediaId: $mediaId
    ) {
      ...paragraphsBlokkliMutationResult
    }
  }
}

mutation pbUpdateHostEntityFieldValue(
  $langcode: String!
  $entityType: EntityType!
  $entityUuid: String!
  $fieldName: String!
  $value: String!
) {
  state: paragraphsEditMutationState(
    entityType: $entityType
    entityUuid: $entityUuid
  ) {
    action: update_host_entity_field_value(
      langcode: $langcode
      fieldName: $fieldName
      value: $value
    ) {
      ...paragraphsBlokkliMutationResult
    }
  }
}

query pbAllowedTypes {
  paragraphsBlokkliAllowedTypes {
    ...paragraphsBlokkliAllowedType
  }
}

query pbConversions {
  paragraphsBlokkliConversions {
    ...paragraphsBlokkliConversion
  }
}

query pbAvailableParagraphs {
  entityQuery(entityType: PARAGRAPHS_TYPE, limit: 999) {
    items {
      ...paragraphsType
    }
  }
  paragraphsBlokkliAllowedTypes {
    ...paragraphsBlokkliAllowedType
  }
  paragraphsBlokkliConversions {
    ...paragraphsBlokkliConversion
  }
}

query pbExisting(
  $entityType: EntityType!
  $entityUuid: String!
  $bundle: String!
  $bundleField: String!
  $titleField: String!
  $conditions: [EntityQueryFilterConditionInput]
  $text: String!
) {
  entityQuery(
    entityType: $entityType
    limit: 12
    sort: [{ field: "changed", direction: ASC }]
    filter: {
      conditions: [
        { field: $bundleField, value: [$bundle] }
        { field: "uuid", value: [$entityUuid], operator: NOT_EQUAL }
        { field: $titleField, value: [$text], operator: LIKE }
      ]
      groups: [{ conjunction: OR, conditions: $conditions }]
    }
  ) {
    total
    items {
      ...paragraphsBlokkliExistingEntity
    }
  }
}

fragment paragraphsBlokkliExistingEntity on Entity {
  id
  label
  uuid
}

fragment paragraphsBlokkliConversion on ParagraphsBlokkliConversion {
  sourceBundle
  targetBundle
}

fragment paragraphsType on ParagraphsType {
  id
  label
  icon: iconDefault
  description
  allowReusable
  isTranslatable
}

fragment paragraphsBlokkliAllowedType on ParagraphsBlokkliAllowedType {
  entityType
  bundle
  fieldName
  allowedTypes
}

query pbMediaLibraryGetResults($text: String, $bundle: String, $page: Int) {
  pbMediaLibraryGetResults(text: $text, bundle: $bundle, page: $page) {
    items {
      label
      mediaId
      context
      thumbnail
      targetBundles
      mediaBundle
    }
    total
    perPage
    filters {
      __typename
      id
      label
      type
      ... on ParagraphsBlokkliMediaLibraryFilterText {
        placeholder
      }

      ... on ParagraphsBlokkliMediaLibraryFilterSelect {
        default
        options
      }
    }
  }
}

mutation pbAddEntityReference(
  $langcode: String
  $entityType: EntityType!
  $entityUuid: String!
  $targetId: String!
  $targetType: String!
  $targetBundle: String!
  $paragraphBundle: String!
  $hostType: String!
  $hostUuid: String!
  $hostFieldName: String!
  $afterUuid: String
) {
  state: paragraphsEditMutationState(
    entityType: $entityType
    entityUuid: $entityUuid
  ) {
    action: add_entity_reference(
      targetType: $targetType
      targetBundle: $targetBundle
      targetId: $targetId
      paragraphBundle: $paragraphBundle
      afterUuid: $afterUuid
      hostType: $hostType
      hostUuid: $hostUuid
      hostFieldName: $hostFieldName
    ) {
      ...paragraphsBlokkliMutationResult
    }
  }
}

mutation pbAddEntityReferenceMultiple(
  $langcode: String
  $entityType: EntityType!
  $entityUuid: String!
  $references: [ParagraphsBlokkliAddEntityReferenceMultipleInput]!
  $hostType: String!
  $hostUuid: String!
  $hostFieldName: String!
  $afterUuid: String
) {
  state: paragraphsEditMutationState(
    entityType: $entityType
    entityUuid: $entityUuid
  ) {
    action: add_entity_reference_multiple(
      references: $references
      afterUuid: $afterUuid
      hostType: $hostType
      hostUuid: $hostUuid
      hostFieldName: $hostFieldName
    ) {
      ...paragraphsBlokkliMutationResult
    }
  }
}

query pbConfig($entityType: String!, $entityBundle: String!) {
  clipboards: pbGetSupportedClipboards {
    ...paragraphsBlokkliSupportedClipboard
  }
  features: paragraphsBlokkliAvailableFeatures {
    ...paragraphsBlokkliAvailableFeatures
  }
  allTypes: entityQuery(entityType: PARAGRAPHS_TYPE, limit: 999) {
    items {
      ...paragraphsType
    }
  }

  fieldConfig: pbGetFieldConfig {
    name
    label
    entityType
    entityBundle
    cardinality
    canEdit
    allowedBundles
  }

  editableFieldConfig: pbGetEditableFieldConfig(
    entityType: $entityType
    entityBundle: $entityBundle
  ) {
    name
    label
    entityType
    entityBundle
    type
    required
    maxLength
  }

  droppableFieldConfig: pbGetDroppableFieldConfig(
    entityType: $entityType
    entityBundle: $entityBundle
  ) {
    name
    label
    entityType
    entityBundle
    cardinality
    canEdit
    allowedEntityType
    allowedBundles
    required
  }

  urlPrefixes: pbGetUrlPrefixes {
    langcode
    prefix
  }
}

fragment paragraphsBlokkliSupportedClipboard on ParagraphsBlokkliSupportedClipboard {
  __typename
  ... on ParagraphsBlokkliSupportedClipboardImage {
    possibleParagraphBundles
    maxFileSize
    fileExtensions
  }

  ... on ParagraphsBlokkliSupportedClipboardFile {
    possibleParagraphBundles
    maxFileSize
    fileExtensions
  }

  ... on ParagraphsBlokkliSupportedClipboardRichText {
    possibleParagraphBundles
  }

  ... on ParagraphsBlokkliSupportedClipboardRemoteVideo {
    possibleParagraphBundles
    videoProviders
  }
}

mutation pbAddClipboardText(
  $langcode: String
  $entityType: EntityType!
  $entityUuid: String!
  $text: String!
  $hostType: String!
  $hostUuid: String!
  $hostFieldName: String!
  $afterUuid: String
) {
  state: paragraphsEditMutationState(
    entityType: $entityType
    entityUuid: $entityUuid
  ) {
    action: add_clipboard_text(
      text: $text
      afterUuid: $afterUuid
      hostType: $hostType
      hostUuid: $hostUuid
      hostFieldName: $hostFieldName
    ) {
      ...paragraphsBlokkliMutationResult
    }
  }
}

mutation pbAddImage(
  $langcode: String
  $entityType: EntityType!
  $entityUuid: String!
  $data: String!
  $fileName: String!
  $hostType: String!
  $hostUuid: String!
  $hostFieldName: String!
  $afterUuid: String
) {
  state: paragraphsEditMutationState(
    entityType: $entityType
    entityUuid: $entityUuid
  ) {
    action: add_image(
      data: $data
      fileName: $fileName
      afterUuid: $afterUuid
      hostType: $hostType
      hostUuid: $hostUuid
      hostFieldName: $hostFieldName
    ) {
      ...paragraphsBlokkliMutationResult
    }
  }
}

mutation pbAddFile(
  $langcode: String
  $entityType: EntityType!
  $entityUuid: String!
  $data: String!
  $fileName: String!
  $hostType: String!
  $hostUuid: String!
  $hostFieldName: String!
  $afterUuid: String
) {
  state: paragraphsEditMutationState(
    entityType: $entityType
    entityUuid: $entityUuid
  ) {
    action: add_file(
      data: $data
      fileName: $fileName
      afterUuid: $afterUuid
      hostType: $hostType
      hostUuid: $hostUuid
      hostFieldName: $hostFieldName
    ) {
      ...paragraphsBlokkliMutationResult
    }
  }
}

mutation pbAddVideoRemote(
  $langcode: String
  $entityType: EntityType!
  $entityUuid: String!
  $url: String!
  $hostType: String!
  $hostUuid: String!
  $hostFieldName: String!
  $afterUuid: String
) {
  state: paragraphsEditMutationState(
    entityType: $entityType
    entityUuid: $entityUuid
  ) {
    action: add_video_remote(
      url: $url
      afterUuid: $afterUuid
      hostType: $hostType
      hostUuid: $hostUuid
      hostFieldName: $hostFieldName
    ) {
      ...paragraphsBlokkliMutationResult
    }
  }
}

mutation pbSetMutationItemStatus(
  $entityType: EntityType!
  $entityUuid: String!
  $langcode: String
  $index: Int!
  $status: Boolean!
) {
  state: paragraphsEditMutationState(
    entityType: $entityType
    entityUuid: $entityUuid
  ) {
    action: setMutationStatus(index: $index, status: $status) {
      ...paragraphsBlokkliMutationResult
    }
  }
}
